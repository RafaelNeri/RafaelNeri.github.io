var Mana = {
    init: function() {
        window.console.log("Mana - Init"), Mana.tabIndexOnEnter(), Mana.masks(), Mana.checkout.createInterestedBind($("#cadastroNotification")), Mana.jQueryFunctions()
    },
    jQueryFunctions: function() {
        jQuery.extend(jQuery.validator.messages, {
            required: "Este campo é requerido.",
            email: "Informe um email válido.",
            number: "Informe somente números neste campo.",
            minlength: jQuery.validator.format("O tamanho mímino é de {0} caracteres."),
            maxlength: jQuery.validator.format("O tamanho máximo é de {0} caracteres."),
            range: jQuery.validator.format("O valor deve ser de no mínimo {0} e no máximo {1}."),
            max: jQuery.validator.format("O valor máximo é de {0}."),
            min: jQuery.validator.format("O valor mínimo é de {0}.")
        }), jQuery.validator.addMethod("cepFound", function(e, t) {
            return $(t).hasClass("cepFound")
        }), jQuery.validator.addMethod("cpf", function(e, t) {
            for (e = jQuery.trim(e), e = e.replace(".", ""), e = e.replace(".", ""), cpf = e.replace("-", ""); cpf.length < 11;) cpf = "0" + cpf;
            var a = /^0+$|^1+$|^2+$|^3+$|^4+$|^5+$|^6+$|^7+$|^8+$|^9+$/,
                o = [],
                r = new Number,
                n = 11;
            for (i = 0; 11 > i; i++) o[i] = cpf.charAt(i), 9 > i && (r += o[i] * --n);
            for (o[9] = (x = r % 11) < 2 ? 0 : 11 - x, r = 0, n = 11, y = 0; 10 > y; y++) r += o[y] * n--;
            o[10] = (x = r % 11) < 2 ? 0 : 11 - x;
            var s = !0;
            return (cpf.charAt(9) != o[9] || cpf.charAt(10) != o[10] || cpf.match(a)) && (s = !1), this.optional(t) || s
        }, "Informe um CPF válido")
    },
    saveFormDataBind: function() {
        $("#commentForm1 input, #commentForm2 input, #commentForm1 select, #commentForm2 select").on("blur", function() {
            sessionStorage.setItem("Mana_Form_" + $(this).attr("name"), $(this).val())
        })
    },
    restoreFormDataSaved: function() {
        $("#commentForm1 input, #commentForm2 input, #commentForm1 select, #commentForm2 select").each(function() {
            var e = sessionStorage.getItem("Mana_Form_" + $(this).attr("name"));
            e && $(this).val(e)
        }), sessionStorage.getItem("Mana_Form_client[address][zipCode]") && CPBCheckout.api.identificationGetAddressByCEP(Mana.checkout.identificationGetAddressByCEPGetData(), Mana.checkout.identificationGetAddressByCEPCallback)
    },
    formValidationInit: function() {
        $("#checkoutForm input, #checkoutForm select").on("focus", function() {
            $('[for="' + $(this).attr("name") + '"]').remove()
        }), $("#checkoutForm").validate({
            errorPlacement: function(e, t) {
                $errorTooltip = $('<span id="' + e.attr("id") + '" for="' + e.attr("id").replace("-error", "") + '" class="error fa fa-exclamation-circle" data-toggle="tooltip" data-placement="top" title="" data-original-title="' + e.html() + '"></span>'), $('[for="' + e.attr("id").replace("-error", "") + '"]').remove(), "payment[form]" !== e.attr("id").replace("-error", "") ? ($wrapTooltip = t.parent().parent().find("label"), $refElement = t) : ($wrapTooltip = t.parents("#paymentForm").find("h3"), $refElement = $wrapTooltip), $wrapTooltip.append($errorTooltip), $wrapTooltip.find('[data-toggle="tooltip"]').tooltip(), e.insertAfter($refElement).wrap("<span/>")
            },
            success: function(e) {
                $('[data-toggle="tooltip"][for="' + e.attr("for") + '"]').remove()
            },
            messages: {
                "client[name]": {
                    required: "Nome é obrigatório",
                    minlength: jQuery.validator.format("O tamamnho mímino é de {0} caracteres")
                },
                "client[cpf]": {
                    required: "CPF é obrigatório",
                    minlength: "CPF está incorreto"
                },
                "client[email]": {
                    required: "Email é obrigatório",
                    email: "O email está incorreto"
                },
                "client[phone]": {
                    required: "Telefone é obrigatório",
                    minlength: "O telefone está incorreto"
                },
                // "client[address][zipCode]": {
                //     required: "CEP é obrigatório",
                //     minlength: "CEP está incorreto",
                //     cepFound: "CEP está incorreto"
                // },
                "client[address][street]": {
                    required: "Endereço é obrigatório"
                },
                "client[address][number]": {
                    required: "Número de endereço é obrigatório"
                },
                "client[address][neighborhood]": {
                    required: "Bairro é obrigatório"
                },
                "client[address][city]": {
                    required: "Cidade é obrigatório"
                },
                "client[address][federativeUnit]": {
                    required: "Estado é obrigatório"
                },
                "payment[form]": {
                    required: "Forma de pagamento é obrigatória"
                },
                "payment[card][number]": {
                    required: "Número do Cartão é obrigatório"
                },
                "payment[card][company]": {
                    required: "Bandeira do Cartão é obrigatória"
                },
                "payment[card][holder]": {
                    required: "Titular do Cartão é obrigatória"
                },
                "payment[card][expiry]": {
                    required: "Vencimento do Cartão é obrigatório",
                    minlength: "Vencimento do Cartão deve ser MM/AAAA"
                },
                "payment[card][cvc]": {
                    required: "Código de Segurança do Cartão é obrigatório"
                },
                "payment[card][installments]": {
                    required: "Parcelamento é obrigatório"
                }
            }
        }), $("[data-client-address-zipcode]").rules("add", {
            cepFound: !0
        }), $(".cpf").rules("add", {
            cpf: {
                cpf: !0
            }
        })
    },
    formIsValid: function() {
        return $("#checkoutForm").validate().form()
    },
    formErrors: function() {
        $("#checkoutFormErrors").hide();
        var e = $("#checkoutForm").validate();
        return e.errors()
    },
    formErrorsDisplay: function() {
        $("#checkoutFormErrorsList").html(""), Mana.formErrors().each(function() {
            $(this).html() && $("#checkoutFormErrorsList").append("<li>" + $(this).html() + "</li>")
        }), $("#checkoutFormErrors").show(), $("html, body").animate({
            scrollTop: 0
        }, 1e3)
    },
    maskPhoneBehavior: function(e) {
        return 11 === e.replace(/\D/g, "").length ? "(00) 0 0000-0000" : "(00) 0000-00009"
    },
    masks: function() {
        $(".phone_with_ddd").mask(Mana.maskPhoneBehavior, {
            onKeyPress: function(e, t, a, o) {
                a.mask(Mana.maskPhoneBehavior.apply({}, arguments), o)
            }
        }), $(".cpf").mask("000.000.000-00", {
            reverse: !0
        }), $(".cep").mask("00000-000"), $("[data-payment-card-number]").length && ($("[data-payment-card-number]").payment("formatCardNumber"), $("[data-payment-card-cvc]").payment("formatCardCVC")), $("[data-payment-card-expiry]").mask("00/0000")
    },
    tabIndexOnEnter: function() {
        $("[tabindex]").on("keyup", function(e) {
            var t = e || window.event,
                a = t.keyCode || t.which;
            return 13 == a && $("[tabindex=" + (this.tabIndex + 1) + "]").focus(), !0
        })
    },
    carinhoHover: function() {
        $(".carrinho").hover(function() {
            $(".carrinhoItens").addClass("carrinhoItens--show")
        }, function() {
            $(".carrinhoItens").removeClass("carrinhoItens--show")
        })
    },
    slide: function(e) {
        var t = 0,
            a = 0;
        e > 1200 ? (t = 4, a = 4) : e > 900 ? (t = 3, a = 3) : e > 768 ? (t = 2, a = 2) : (t = 1, a = 1);
        var o = 400;
        $(".materiaisDownload").bxSlider({
            minSlides: t,
            maxSlides: a,
            slideWidth: o,
            pager: !1,
            controls: !0,
            prevText: "",
            nextText: "",
            adaptiveHeight: !0,
            adaptiveHeightSpeed: 500,
            prevSelector: $("#setaSlider-prev"),
            nextSelector: $("#setaSlider-next")
        }), $("#setaSlider-prev .bx-prev").addClass("fa fa-chevron-left fa-lg"), $("#setaSlider-next .bx-next").addClass("fa fa-chevron-right fa-lg")
    },
    menuTopoItensLink: function() {
        $('a[href*="#"]:not([href="#"])').click(function() {
            if (location.pathname.replace(/^\//, "") == this.pathname.replace(/^\//, "") && location.hostname == this.hostname) {
                var e = $(this.hash);
                if (e = e.length ? e : $("[name=" + this.hash.slice(1) + "]"), e.length) return $("html, body").animate({
                    scrollTop: e.offset().top
                }, 1e3), !1
            }
        })
    },
    menuTopo: function() {
        var e = $("#inicio");
        $(document).on("scroll", function() {
            var t = $(document).scrollTop();
            t >= 100 ? (e.addClass("menuFixo"), $("#sobre").css("margin-top", "0px")) : ($("#sobre").css("margin-top", -t + "px"), e.removeClass("menuFixo"))
        })
    },
    menuReponsivo: function() {
        $(".navicon").on("click", function() {
            $(".itensMenu").addClass("itensMenu--show")
        }), $(".itemMenuSingle").on("click", function() {
            $(".itensMenu").removeClass("itensMenu--show")
        }), $(".fecharMenu").on("click", function() {
            $(".itensMenu").removeClass("itensMenu--show")
        }), $(".navicon").on("click", function() {
            $("html, body").css({
                "overflow-y": "hidden"
            })
        }), $(".itemMenuSingle, .fecharMenu").on("click", function() {
            $("html, body").css({
                "overflow-y": "visible"
            })
        })
    },
    youtubeModal: function() {
        $(".youtube").YouTubeModal({
            autoplay: 1,
            width: 640,
            height: 480
        }), $(".youtube").on("click", function() {
            CPBCheckout.Google.event("Materiais de Divulgação", "Play Video", "Youtube (Alt: " + $(this).attr("alt") + ")")
        })
    },
    materialDivulgacao: function() {
        $(".download").on("click", function() {
            CPBCheckout.Google.event("Materiais de Divulgação", "Download", "Arquivo (Alt: " + $(this).attr("alt") + ")")
        })
    },
    carregarImg: function() {
        $("img.lazy").lazyload()
    },
    tooltipCodigoSeguranca: function() {
        $('[data-toggle="tooltip"]').tooltip()
    },
    checkout: {
        removeFromCartVisual: function(e) {
            return $productQuantity = e.parents(".corpoItem").addClass("removed").find("[data-product-quantity]"), $productQuantity.val(0), $productQuantity.data("productId")
        },
        removeFromCartBindClick: function() {
            $(".iconTrash").on("click", function() {
                var e = Mana.checkout.removeFromCartVisual($(this));
                CPBCheckout.Cart.updateProduct({
                    id: e,
                    quantity: 0
                }), CPBCheckout.action.productSubTotalById(e);
                var t = $(".corpoItem:not(.removed) .iconTrash");
                1 === t.length && t.css("opacity", ".1").off("click")
            });
            var e = $(".corpoItem:not(.removed) .iconTrash");
            1 === e.length && e.css("opacity", ".1").off("click")
        },
        showItensWithQuantitySetup: function() {
            $("[data-product-quantity]").each(function() {
                var e = $(this);
                e.val() > 0 && e.parents(".corpoItem").removeClass("removed").show()
            })
        },
        updateItemValueColor: function(e, t) {
            t ? e.addClass("subtotal--verde") : e.removeClass("subtotal--verde")
        },
        updateQuantityItens: function(e) {
            $("#numeroCarrinho").html(e), 0 == e ? ($(".fa-shopping-cart").css("color", "#9d9d9d"), $("#palavraItens").html("itens"), $("#finalizarCompra").removeClass("btn--verde").addClass("btn--branco").prop("href", "#assinaturas"), $(".licaoAssTotal").removeClass("licaoAssTotal--total")) : ($("#palavraItens").html(1 == e ? "item" : "itens"), $("#finalizarCompra").removeClass("btn--branco").addClass("btn--verde").prop("href", "/checkout.html"), $(".fa-shopping-cart").css("color", "#2ECC71"), $(".licaoAssTotal").addClass("licaoAssTotal--total"))
        },
        createInterestedValidateData: function() {
            return $("#notificationForm").validate({
                rules: {
                    interestedName: {
                        required: !0,
                        minlength: 10
                    },
                    interestedEmail: {
                        required: !0
                    },
                    interestedPhone: {
                        required: !0,
                        minlength: 14
                    },
                    interestedFederativeUnit: {
                        required: !0
                    }
                }
            }), $("#notificationForm").valid()
        },
        createInterestedGetData: function() {
            return {
                name: $("#interestedName").val(),
                email: $("#interestedEmail").val(),
                phone: $("#interestedPhone").val(),
                federativeUnit: $("#interestedFederativeUnit").val(),
                what: "Projeto Mana"
            }
        },
        createInterestedBind: function(e) {
            e.on("click", function() {
                Mana.checkout.createInterestedValidateData() && ($("#notificationForm input, #notificationForm select").prop("disable", "disable"), $("#cadastroNotification").text("Enviando..."), CPBCheckout.api.identificationCreateInterested(Mana.checkout.createInterestedGetData(), Mana.checkout.createInterestedCallback))
            })
        },
        createInterestedCallback: function(e) {
            var t = "";
            200 == e.code ? (t = '<h2><i class="fa fa-check" aria-hidden="true"></i> Contato salvo com sucesso!</h2>', $("#notificationForm input, #notificationForm select").val(""), CPBCheckout.Google.event("Notificação Interessados", "Cadastro", "Sucesso")) : (t = '<h2><i class="fa fa-exclamation-triangle" aria-hidden="true"></i> ' + e.message + "</h2>", CPBCheckout.Google.event("Notificação Interessados", "Cadastro", "Erro (Mensagem: " + e.message + ")")), $("#notificationForm input, #notificationForm select").removeProp("disable"), $("#cadastroNotification").text("Enviar"), $(".mesageSuccessCalendar").html(t).addClass("mesageSuccessCalendar--active").delay(2e3).queue(function() {
                $(this).removeClass("mesageSuccessCalendar--active")
            })
        },
        identificationGetAddressByCEPBlur: function() {
            Mana.checkout.identificationGetAddressByCEPBind($("[data-client-address-zipcode]"))
        },
        identificationGetAddressByCEPGetData: function() {
            return {
                cep: $("[data-client-address-zipcode]").val().replace(/\D/g, "")
            }
        },
        identificationGetAddressByCEPBind: function(e) {
            e.on("blur", function() {
                CPBCheckout.api.identificationGetAddressByCEP(Mana.checkout.identificationGetAddressByCEPGetData(), Mana.checkout.identificationGetAddressByCEPCallback)
            })
        },
        identificationGetAddressByCEPCallback: function(e) {
            e.message;
            if (200 == e.code) {
                var t = e.results.address;
                void 0 !== t.line3 ? ($("[data-client-address-zipcode]").addClass("cepFound"), $("[data-client-address-street]").val(t.line1), $("[data-client-address-neighborhood]").val(t.line2), $("[data-client-address-city]").val(t.line3), $("[data-client-address-federativeUnit]").val(t.line4), sessionStorage.setItem("Mana_Form_client[address][street]", t.line1), sessionStorage.setItem("Mana_Form_client[address][neighborhood]", t.line2), sessionStorage.setItem("Mana_Form_client[address][city]", t.line3), sessionStorage.setItem("Mana_Form_client[address][federativeUnit]", t.line4), $('[for^="client[address]"].error').remove()) : (sessionStorage.removeItem("Mana_Form_client[address][street]"), sessionStorage.removeItem("Mana_Form_client[address][neighborhood]"), sessionStorage.removeItem("Mana_Form_client[address][city]"), sessionStorage.removeItem("Mana_Form_client[address][federativeUnit]"), $("[data-client-address-zipcode]").removeClass("cepFound"));
                //var a = $("#checkoutForm").validate();
                //a.element("[data-client-address-zipcode]")
            }
        },
        getProductDetailCallback: function(e) {
            var t = $("[data-product][data-product-id=" + e + "]");
            return {
                id: t.data("productId"),
                name: t.data("productName"),
                category: t.data("productCategory"),
                brand: "CPB",
                price: parseFloat(t.data("productValue")),
                quantity: parseInt(t.find("[data-product-quantity]").val())
            }
        },
        getProductListCallback: function(e) {
            return $("[data-product][data-product-id=" + e + "]").parents("[data-products-list]").data("productsList")
        },
        changePaymentFormCallback: function(e) {
            1 == e ? $("#paymentForm input, #paymentForm select").attr("required", "required") : ($("#paymentForm input, #paymentForm select").removeAttr("required"), $('[for^="payment[card]"].error').remove()), CPBCheckout.Google.checkoutOption(4, 1 == e ? "Cartão de Crédito" : "Boleto Itaú")
        },
        createOrderVisualCallback: function(e) {
            201 === e.code ? (sessionStorage.clear(), $("#checkoutForm").hide(), $(".carrinhoComItens").hide(), $("#subTitulo").html("Pedido realizado com sucesso"), $("#mensageCompra_sucesso_numeroPedido").html("Nº do pedido: " + e.results.order.id), $("#mensagemCompra_erro").hide(), $("#mensageCompra_sucesso").show()) : ($("#mensageCompra_sucesso").hide(), $("#mensagemCompra_erro_texto").html(e.message ? e.message : "Um problema ocorreu no servidor, tente novamente mais tarde. Desde já agradeçemos e pedidos desculpas pelo inconveniente."), $("#mensagemCompra_erro").show(), $("html, body").animate({
                scrollTop: 999999999
            }, 1e3))
        }
    }
};